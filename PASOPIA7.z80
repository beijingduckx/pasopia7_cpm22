	TITLE	Pasopia7 CP/M BIOS

PA7007:

INI_ATTRIB	EQU	07h
REV_ATTRIB	EQU	08h
NORM_ATTRIB   	EQU	07h


TITLE_MSG	MACRO
	DB 	'60K CP/M Version 2.2 for Pasopia7'
		ENDM

COLD_INIT	MACRO
	; Nothing to be done
		ENDM

include CMN_BIOS.z80

;; ----------------------------------------
;; Enable Text VRAM
;;
;; NOTE: TVRAM_ON - TVRAM_OFF should be atomic.
;;    (i.e. interrupt should be disabled)
;; ----------------------------------------
TVRAM_ON:
	in a,(22h)
	and 03h
	ld (MEMST), a  ;; backup
	or 04h
	out (3ch), a   ;; vram on
	ld a, 44h
	out (0ch), a	;; select text plane
	ret

;; ----------------------------------------
;; Calcuate VRAM address for current cursor
;;
;; Out : HL : VRAM address
;; ----------------------------------------
CALC_TVRAM:
	ld a, (CURY)
	ld l, a
	ld h, 0
	;; 80 = 16 + 64
	add hl, hl
	add hl, hl  ; x4
	add hl, hl	; x8
	add hl, hl  ; x16
	ld d, h
	ld e, l
	add hl, hl  ; x32
	add hl, hl  ; x64
	add hl, de
	;; x8 
	add hl, hl
	add hl, hl
	add hl, hl
	ex de, hl
	;; x = x * 8
	ld a, (CURX)
	ld l, a
	ld h, 0
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, de
	ld de,08000h  ;; vram top
	add hl, de
	ret

;; ----------------------------------------
;; Clear screen from the current cursor
;;  Input: BC: character count
;;  interrupt should be disabled
;; ----------------------------------------
CLEARSTRING:
	call TVRAM_ON
	call CALC_TVRAM
	ld a, 7
	out (0dh), a ;; normal attribute
	ld de, 8
CLEARST_LOOP:
	ld a, ' '
	ld (hl), a
	add hl, de
	dec bc
	ld a, b
	or c
	jr nz, CLEARST_LOOP
	;; TVRAM off
TVRAM_OFF:
	ld a, (MEMST)
	out (3ch), a
	ret

;; ----------------------------------------
;; String output
;;   - c : count
;;   - IX : pointer to string
;;  Interrupt should be disabled
;; ----------------------------------------
PUTSTRING:
	call TVRAM_ON
	ld a, (ATTRIB)
	out (0dh), a
	xor a
	out (0eh), a ;; attribute non-warp-around
	call CALC_TVRAM
PUTCHAR_LOOP:
	ld b, (ix)
	ld (hl), b
	;; increment cursor pos
	inc ix
	ld de, 8
	add hl, de
	inc a
	cp 80
	jr c, PUTCHAR2
	xor a
	ld (CURX), a
	ld a, (CURY)
	inc a
	cp MAXLINE
	jr c, PUTCHAR3
	ld de, -81*8
	add hl, de
	dec a
	push af
	; whole-screen scroll 
	push bc
	call WHOLE_SCROLL
	pop bc
	pop af
PUTCHAR3:
	ld (CURY), a
	ld a,(CURX)
	jr PUTCHAR4

PUTCHAR2:
	ld (CURX), a

PUTCHAR4:
	dec c
	jr nz, PUTCHAR_LOOP
	;; VRAM OFF
	ld a, (MEMST)
	out (3ch), a
	call SETCURSOR
	;ei
	ret

;; ----------------------------------------
;; Partial line scroll  (BIOS func #46)
;; B: 0: scroll-up, 1: scroll-down
;; D: Top line
;; E: Bottom line
;;  - TVRAM should be on
;; ----------------------------------------
WHOLE_SCROLL:
	ld b, 0
	ld d, 0
	ld e, MAXLINE
SCROLL:
	push hl
	ld a, e
	sub d
	jr c, SCROLL_END
	jr z, SCROLL_END
	;; NOTE: no error check
	ld l, a
	ld h, 0
	; hl = hl * 80 (= 64 + 16)
	call X80
	ld a, b
	ld b, h
	ld c, l
	;
	ld h, a
	ld a, 10h
	out (0eh), a ;; atrribute data wrap-around
	ld a, h
	or a
	jr nz, SCROLL_DOWN

	;; SCROLL UP
	ld h, 0
	ld l, d
	call X80
	add hl, hl
	add hl, hl
	add hl, hl
	ld de, 8000h
	add hl, de
	ld d, h
	ld e, l
	ld hl, 80*8
	add hl, de
SCRUP_LOOP:
	ldi
	jp po, SCROLL_END
	push bc
	ld bc, 7
	add hl, bc
	ex de, hl
	add hl, bc
	ex de, hl
	pop bc
	jr SCRUP_LOOP
SCROLL_DOWN:
	;; SCROLL DOWN
	inc e
	ld h, 0
	ld l, e
	call X80
	dec hl
	add hl, hl
	add hl, hl
	add hl, hl
	ld de, 8000h
	add hl, de
	ld d, h
	ld e, l
	ld hl, -80*8
	add hl, de
SCRDWN_LOOP:
	ldd
	jp po, SCROLL_END
	push bc
	ld bc, -7
	add hl, bc
	ex de, hl
	add hl, bc
	ex de, hl
	pop bc
	jr SCRDWN_LOOP

SCROLL_END:
	xor a
	out (0eh), a ;; attribute non-warp-around
	pop hl
	ret

;; ----------------------------------------
;; Update cursor pos(CRTC)
;; ----------------------------------------
SETCURSOR:
	ld a, (CURY)
	ld l, a
	ld h, 0
	call X80
	ld a, (CURX)
	ex de, hl
	ld l, a
	ld h, 0
	add hl, de
	ld a, 14
	out (CRTC), a
	ld a, h
	out (CRTC+1), a
	ld a, 15
	out (CRTC), a
	ld a, l
	out (CRTC+1), a
	ld h, 7
	ld a, (KEYSTATE)
	; CAPS
	bit 0, a
	jr z, SETCUR2
	ld h, 6
SETCUR2:
	; KANA
	bit 1, a
	jr z, SETCUR3
	ld h, 0
SETCUR3:
	ld a, 10
	out (CRTC), a
	ld a, h
	out (CRTC+1), a

	ret

;; -----------------------------------
;;  Pasopia7 CRTC Settings
;;   (from Technical Manual)
;; -----------------------------------
CRTC_DATA:
	db 113, 80, 92, 38h, 31, 6, 25, 28, 40h
	db 07, 07, 07, 0, 0, 0, 0

;; -----------------------------------
;;  Pasopia7 Key map
;; -----------------------------------

DEFAULT_MAP:
	db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h
	db 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h
	db 38h, 39h, 2Dh, 2Bh, 2Ah, 2Fh, 2Eh, 0Dh
	db 1Ch, 09h, 08h, 1bh, 00h, 00h, 00h, 00h
	db 0Bh, 00h, 00h, 03h, 1Dh, 1Eh, 00h, 20h
	db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h

SHIFT_ALPHA:
	db 31h, 30h, 34h, 72h, 79h, 5Fh, 5Eh, 5Ch
	db 32h, 33h, 38h, 74h, 75h, 37h, 40h, 5Bh
	db 2Dh, 35h, 36h, 66h, 68h, 39h, 3Ah, 5Dh
	db 71h, 77h, 65h, 67h, 6Ah, 69h, 6Fh, 70h
	db 61h, 73h, 64h, 76h, 6Eh, 6Bh, 6Ch, 3Bh
	db 7Ah, 78h, 63h, 62h, 6Dh, 2Ch, 2Eh, 2Fh

SHIFT_KANA:
	db 21h, 30h, 24h, 52h, 59h, 5Fh, 5Eh, 5Ch
	db 22h, 23h, 28h, 54h, 55h, 27h, 40h, 7Bh
	db 3Dh, 25h, 26h, 46h, 48h, 29h, 2Ah, 7Dh
	db 51h, 57h, 45h, 47h, 4Ah, 49h, 4Fh, 50h
	db 41h, 53h, 44h, 56h, 4Eh, 4Bh, 4Ch, 2Bh
	db 5Ah, 58h, 43h, 42h, 4Dh, 3Ch, 3Eh, 3Fh

	db 0C7h, 0A6h, 0A9h, 0BDh, 0DDh, 0DBh, 0CDh, 0B0h
	db 0CCh, 0A7h, 0ADh, 0B6h, 0C5h, 0ACh, 0DEh, 0A2h
	db 0CEh, 0AAh, 0ABh, 0CAh, 0B8h, 0AEh, 0B9h, 0A3h
	db 0C0h, 0C3h, 0A8h, 0B7h, 0CFh, 0C6h, 0D7h, 0BEh
	db 0C1h, 0C4h, 0BCh, 0CBh, 0D0h, 0C9h, 0D8h, 0DAh
	db 0AFh, 0BBh, 0BFh, 0BAh, 0D3h, 0A4h, 0A1h, 0A5h

NORM_KANA:
	db 0D9h, 0DFh, 0D1h, 0C8h, 0D2h, 0DCh, 0B1h, 0B2h
	db 0B3h, 0B4h, 0B5h, 0D4h, 0D5h, 0D6h, 0C2h

PADDING:
	ds      (VECTOR_HIGH*256 + 0f0h) - $
        
	.dephase

include VECTTBL.z80

        END
